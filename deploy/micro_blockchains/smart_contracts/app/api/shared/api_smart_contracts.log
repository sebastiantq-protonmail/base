2024-02-18 21:06:49,437 [INFO] - Started server process [79707]
2024-02-18 21:06:49,437 [INFO] - Waiting for application startup.
2024-02-18 21:06:49,437 [INFO] - Application startup complete.
2024-02-18 21:18:50,394 [INFO] - Shutting down
2024-02-18 21:18:50,495 [INFO] - Waiting for application shutdown.
2024-02-18 21:18:50,495 [INFO] - Application shutdown complete.
2024-02-18 21:18:50,496 [INFO] - Finished server process [79707]
2024-02-18 21:18:51,253 [INFO] - Started server process [80144]
2024-02-18 21:18:51,253 [INFO] - Waiting for application startup.
2024-02-18 21:18:51,253 [INFO] - Application startup complete.
2024-02-18 21:20:29,210 [INFO] - Shutting down
2024-02-18 21:20:29,311 [INFO] - Waiting for application shutdown.
2024-02-18 21:20:29,311 [INFO] - Application shutdown complete.
2024-02-18 21:20:29,311 [INFO] - Finished server process [80144]
2024-02-18 21:20:30,127 [INFO] - Started server process [80761]
2024-02-18 21:20:30,127 [INFO] - Waiting for application startup.
2024-02-18 21:20:30,127 [INFO] - Application startup complete.
2024-02-18 21:21:36,880 [INFO] - Shutting down
2024-02-18 21:21:36,981 [INFO] - Waiting for application shutdown.
2024-02-18 21:21:36,982 [INFO] - Application shutdown complete.
2024-02-18 21:21:36,983 [INFO] - Finished server process [80761]
2024-02-18 21:21:37,669 [INFO] - Started server process [80968]
2024-02-18 21:21:37,670 [INFO] - Waiting for application startup.
2024-02-18 21:21:37,670 [INFO] - Application startup complete.
2024-02-18 21:26:05,359 [INFO] - Shutting down
2024-02-18 21:26:05,460 [INFO] - Waiting for application shutdown.
2024-02-18 21:26:05,461 [INFO] - Application shutdown complete.
2024-02-18 21:26:05,461 [INFO] - Finished server process [80968]
2024-02-18 21:26:06,161 [INFO] - Started server process [81322]
2024-02-18 21:26:06,162 [INFO] - Waiting for application startup.
2024-02-18 21:26:06,162 [INFO] - Application startup complete.
2024-02-18 21:26:13,198 [INFO] - Shutting down
2024-02-18 21:26:13,299 [INFO] - Waiting for application shutdown.
2024-02-18 21:26:13,300 [INFO] - Application shutdown complete.
2024-02-18 21:26:13,300 [INFO] - Finished server process [81322]
2024-02-18 21:26:14,025 [INFO] - Started server process [81441]
2024-02-18 21:26:14,025 [INFO] - Waiting for application startup.
2024-02-18 21:26:14,025 [INFO] - Application startup complete.
2024-02-18 21:26:23,272 [INFO] - Shutting down
2024-02-18 21:26:23,373 [INFO] - Waiting for application shutdown.
2024-02-18 21:26:23,374 [INFO] - Application shutdown complete.
2024-02-18 21:26:23,374 [INFO] - Finished server process [81441]
2024-02-18 21:26:26,885 [INFO] - Started server process [81540]
2024-02-18 21:26:26,885 [INFO] - Waiting for application startup.
2024-02-18 21:26:26,885 [INFO] - Application startup complete.
2024-02-18 21:26:54,529 [INFO] - Shutting down
2024-02-18 21:26:54,630 [INFO] - Waiting for application shutdown.
2024-02-18 21:26:54,630 [INFO] - Application shutdown complete.
2024-02-18 21:26:54,630 [INFO] - Finished server process [81540]
2024-02-18 21:26:55,340 [INFO] - Started server process [81609]
2024-02-18 21:26:55,340 [INFO] - Waiting for application startup.
2024-02-18 21:26:55,341 [INFO] - Application startup complete.
2024-02-18 21:26:59,060 [INFO] - Shutting down
2024-02-18 21:26:59,161 [INFO] - Waiting for application shutdown.
2024-02-18 21:26:59,161 [INFO] - Application shutdown complete.
2024-02-18 21:26:59,161 [INFO] - Finished server process [81609]
2024-02-18 21:26:59,944 [INFO] - Started server process [81651]
2024-02-18 21:26:59,944 [INFO] - Waiting for application startup.
2024-02-18 21:26:59,944 [INFO] - Application startup complete.
2024-02-18 21:59:17,041 [INFO] - Shutting down
2024-02-18 21:59:17,142 [INFO] - Waiting for application shutdown.
2024-02-18 21:59:17,142 [INFO] - Application shutdown complete.
2024-02-18 21:59:17,142 [INFO] - Finished server process [81651]
2024-02-18 21:59:17,932 [INFO] - Started server process [81911]
2024-02-18 21:59:17,933 [INFO] - Waiting for application startup.
2024-02-18 21:59:17,933 [INFO] - Application startup complete.
2024-02-18 22:03:55,964 [INFO] - Shutting down
2024-02-18 22:03:56,065 [INFO] - Waiting for application shutdown.
2024-02-18 22:03:56,066 [INFO] - Application shutdown complete.
2024-02-18 22:03:56,066 [INFO] - Finished server process [81911]
2024-02-18 22:03:56,776 [INFO] - Started server process [82170]
2024-02-18 22:03:56,777 [INFO] - Waiting for application startup.
2024-02-18 22:03:56,777 [INFO] - Application startup complete.
2024-02-18 22:14:06,458 [INFO] - Shutting down
2024-02-18 22:14:06,559 [INFO] - Waiting for application shutdown.
2024-02-18 22:14:06,560 [INFO] - Application shutdown complete.
2024-02-18 22:14:06,561 [INFO] - Finished server process [82170]
2024-02-18 22:14:07,193 [INFO] - Started server process [82465]
2024-02-18 22:14:07,193 [INFO] - Waiting for application startup.
2024-02-18 22:14:07,194 [INFO] - Application startup complete.
2024-02-18 22:14:18,760 [INFO] - Shutting down
2024-02-18 22:14:18,861 [INFO] - Waiting for application shutdown.
2024-02-18 22:14:18,862 [INFO] - Application shutdown complete.
2024-02-18 22:14:18,862 [INFO] - Finished server process [82465]
2024-02-18 22:14:19,498 [INFO] - Started server process [82525]
2024-02-18 22:14:19,498 [INFO] - Waiting for application startup.
2024-02-18 22:14:19,498 [INFO] - Application startup complete.
2024-02-18 22:52:02,898 [INFO] - Shutting down
2024-02-18 22:52:02,999 [INFO] - Waiting for application shutdown.
2024-02-18 22:52:02,999 [INFO] - Application shutdown complete.
2024-02-18 22:52:03,000 [INFO] - Finished server process [82525]
2024-02-18 23:22:46,362 [INFO] - Started server process [86945]
2024-02-18 23:22:46,362 [INFO] - Waiting for application startup.
2024-02-18 23:22:46,362 [INFO] - Application startup complete.
2024-02-18 23:22:52,189 [INFO] - Shutting down
2024-02-18 23:22:52,290 [INFO] - Waiting for application shutdown.
2024-02-18 23:22:52,291 [INFO] - Application shutdown complete.
2024-02-18 23:22:52,291 [INFO] - Finished server process [86945]
2024-02-18 23:22:52,873 [INFO] - Started server process [86999]
2024-02-18 23:22:52,873 [INFO] - Waiting for application startup.
2024-02-18 23:22:52,873 [INFO] - Application startup complete.
2024-02-18 23:22:59,910 [INFO] - Shutting down
2024-02-18 23:23:00,011 [INFO] - Waiting for application shutdown.
2024-02-18 23:23:00,012 [INFO] - Application shutdown complete.
2024-02-18 23:23:00,012 [INFO] - Finished server process [86999]
2024-02-18 23:28:07,148 [INFO] - Started server process [87196]
2024-02-18 23:28:07,148 [INFO] - Waiting for application startup.
2024-02-18 23:28:07,148 [INFO] - Application startup complete.
2024-02-18 23:28:45,438 [INFO] - Shutting down
2024-02-18 23:28:45,538 [INFO] - Waiting for application shutdown.
2024-02-18 23:28:45,539 [INFO] - Application shutdown complete.
2024-02-18 23:28:45,539 [INFO] - Finished server process [87196]
2024-02-18 23:28:51,048 [INFO] - Started server process [87574]
2024-02-18 23:28:51,048 [INFO] - Waiting for application startup.
2024-02-18 23:28:51,048 [INFO] - Application startup complete.
2024-02-18 23:29:00,395 [INFO] - Shutting down
2024-02-18 23:29:00,496 [INFO] - Waiting for application shutdown.
2024-02-18 23:29:00,496 [INFO] - Application shutdown complete.
2024-02-18 23:29:00,496 [INFO] - Finished server process [87574]
2024-02-18 23:29:55,002 [INFO] - Started server process [88201]
2024-02-18 23:29:55,003 [INFO] - Waiting for application startup.
2024-02-18 23:29:55,003 [INFO] - Application startup complete.
2024-02-18 23:33:38,747 [INFO] - Shutting down
2024-02-18 23:33:38,848 [INFO] - Waiting for application shutdown.
2024-02-18 23:33:38,849 [INFO] - Application shutdown complete.
2024-02-18 23:33:38,849 [INFO] - Finished server process [88201]
2024-02-18 23:33:39,431 [INFO] - Started server process [88405]
2024-02-18 23:33:39,431 [INFO] - Waiting for application startup.
2024-02-18 23:33:39,431 [INFO] - Application startup complete.
2024-02-18 23:51:05,485 [INFO] - Shutting down
2024-02-18 23:51:05,585 [INFO] - Waiting for application shutdown.
2024-02-18 23:51:05,586 [INFO] - Application shutdown complete.
2024-02-18 23:51:05,587 [INFO] - Finished server process [88405]
2024-02-18 23:51:06,181 [INFO] - Started server process [89530]
2024-02-18 23:51:06,182 [INFO] - Waiting for application startup.
2024-02-18 23:51:06,182 [INFO] - Application startup complete.
2024-02-18 23:51:20,348 [INFO] - Shutting down
2024-02-18 23:51:20,450 [INFO] - Waiting for application shutdown.
2024-02-18 23:51:20,454 [INFO] - Application shutdown complete.
2024-02-18 23:51:20,456 [INFO] - Finished server process [89530]
2024-02-18 23:51:21,557 [INFO] - Started server process [89606]
2024-02-18 23:51:21,558 [INFO] - Waiting for application startup.
2024-02-18 23:51:21,558 [INFO] - Application startup complete.
2024-02-18 23:53:46,900 [INFO] - Shutting down
2024-02-18 23:53:47,001 [INFO] - Waiting for application shutdown.
2024-02-18 23:53:47,001 [INFO] - Application shutdown complete.
2024-02-18 23:53:47,002 [INFO] - Finished server process [89606]
2024-02-18 23:53:47,599 [INFO] - Started server process [89720]
2024-02-18 23:53:47,600 [INFO] - Waiting for application startup.
2024-02-18 23:53:47,600 [INFO] - Application startup complete.
2024-02-18 23:54:54,830 [INFO] - Shutting down
2024-02-18 23:54:54,931 [INFO] - Waiting for application shutdown.
2024-02-18 23:54:54,931 [INFO] - Application shutdown complete.
2024-02-18 23:54:54,932 [INFO] - Finished server process [89720]
2024-02-18 23:54:55,585 [INFO] - Started server process [89813]
2024-02-18 23:54:55,585 [INFO] - Waiting for application startup.
2024-02-18 23:54:55,585 [INFO] - Application startup complete.
2024-02-18 23:55:46,140 [INFO] - Shutting down
2024-02-18 23:55:46,242 [INFO] - Waiting for application shutdown.
2024-02-18 23:55:46,243 [INFO] - Application shutdown complete.
2024-02-18 23:55:46,243 [INFO] - Finished server process [89813]
2024-02-18 23:55:46,861 [INFO] - Started server process [89894]
2024-02-18 23:55:46,862 [INFO] - Waiting for application startup.
2024-02-18 23:55:46,862 [INFO] - Application startup complete.
2024-02-18 23:57:06,941 [INFO] - Shutting down
2024-02-18 23:57:07,043 [INFO] - Waiting for application shutdown.
2024-02-18 23:57:07,043 [INFO] - Application shutdown complete.
2024-02-18 23:57:07,043 [INFO] - Finished server process [89894]
2024-02-19 00:15:24,841 [INFO] - Started server process [90730]
2024-02-19 00:15:24,842 [INFO] - Waiting for application startup.
2024-02-19 00:15:24,842 [INFO] - Application startup complete.
2024-02-19 00:15:52,372 [ERROR] - Error : 'DAGBlockchain' object has no attribute 'get_smart_contracts'
2024-02-19 00:16:15,904 [INFO] - Shutting down
2024-02-19 00:16:16,005 [INFO] - Waiting for application shutdown.
2024-02-19 00:16:16,006 [INFO] - Application shutdown complete.
2024-02-19 00:16:16,006 [INFO] - Finished server process [90730]
2024-02-19 00:16:16,584 [INFO] - Started server process [90906]
2024-02-19 00:16:16,584 [INFO] - Waiting for application startup.
2024-02-19 00:16:16,584 [INFO] - Application startup complete.
2024-02-19 00:17:11,471 [INFO] - Shutting down
2024-02-19 00:17:11,571 [INFO] - Waiting for application shutdown.
2024-02-19 00:17:11,572 [INFO] - Application shutdown complete.
2024-02-19 00:17:11,572 [INFO] - Finished server process [90906]
2024-02-19 00:17:12,218 [INFO] - Started server process [91040]
2024-02-19 00:17:12,218 [INFO] - Waiting for application startup.
2024-02-19 00:17:12,218 [INFO] - Application startup complete.
2024-02-19 00:17:57,345 [INFO] - Shutting down
2024-02-19 00:17:57,446 [INFO] - Waiting for application shutdown.
2024-02-19 00:17:57,446 [INFO] - Application shutdown complete.
2024-02-19 00:17:57,447 [INFO] - Finished server process [91040]
2024-02-21 21:51:02,587 [INFO] - Started server process [7281]
2024-02-21 21:51:02,587 [INFO] - Waiting for application startup.
2024-02-21 21:51:02,588 [INFO] - Application startup complete.
2024-02-21 21:51:06,006 [INFO] - Shutting down
2024-02-21 21:51:06,107 [INFO] - Waiting for application shutdown.
2024-02-21 21:51:06,108 [INFO] - Application shutdown complete.
2024-02-21 21:51:06,108 [INFO] - Finished server process [7281]
2024-02-21 21:51:07,895 [INFO] - Started server process [7361]
2024-02-21 21:51:07,895 [INFO] - Waiting for application startup.
2024-02-21 21:51:07,895 [INFO] - Application startup complete.
2024-02-21 21:51:24,791 [INFO] - Shutting down
2024-02-21 21:51:24,892 [INFO] - Finished server process [7361]
2024-02-21 21:52:25,767 [INFO] - Started server process [8672]
2024-02-21 21:52:25,767 [INFO] - Waiting for application startup.
2024-02-21 21:52:25,767 [INFO] - Application startup complete.
2024-02-21 21:54:36,632 [INFO] - Shutting down
2024-02-21 21:54:36,733 [INFO] - Waiting for application shutdown.
2024-02-21 21:54:36,733 [INFO] - Application shutdown complete.
2024-02-21 21:54:36,734 [INFO] - Finished server process [8672]
2024-02-21 21:54:37,346 [INFO] - Started server process [8810]
2024-02-21 21:54:37,347 [INFO] - Waiting for application startup.
2024-02-21 21:54:37,347 [INFO] - Application startup complete.
2024-02-21 21:55:01,566 [INFO] - Shutting down
2024-02-21 21:55:01,667 [INFO] - Waiting for application shutdown.
2024-02-21 21:55:01,668 [INFO] - Application shutdown complete.
2024-02-21 21:55:01,668 [INFO] - Finished server process [8810]
2024-02-21 21:55:02,335 [INFO] - Started server process [8959]
2024-02-21 21:55:02,335 [INFO] - Waiting for application startup.
2024-02-21 21:55:02,335 [INFO] - Application startup complete.
2024-02-21 21:55:34,788 [INFO] - Shutting down
2024-02-21 21:55:34,889 [INFO] - Waiting for application shutdown.
2024-02-21 21:55:34,890 [INFO] - Application shutdown complete.
2024-02-21 21:55:34,890 [INFO] - Finished server process [8959]
2024-02-21 21:55:35,571 [INFO] - Started server process [9012]
2024-02-21 21:55:35,571 [INFO] - Waiting for application startup.
2024-02-21 21:55:35,571 [INFO] - Application startup complete.
2024-02-21 21:55:37,580 [INFO] - Shutting down
2024-02-21 21:55:37,681 [INFO] - Waiting for application shutdown.
2024-02-21 21:55:37,682 [INFO] - Application shutdown complete.
2024-02-21 21:55:37,683 [INFO] - Finished server process [9012]
2024-02-21 21:55:38,328 [INFO] - Started server process [9057]
2024-02-21 21:55:38,328 [INFO] - Waiting for application startup.
2024-02-21 21:55:38,328 [INFO] - Application startup complete.
2024-02-21 21:55:46,167 [INFO] - Shutting down
2024-02-21 21:55:46,268 [INFO] - Waiting for application shutdown.
2024-02-21 21:55:46,269 [INFO] - Application shutdown complete.
2024-02-21 21:55:46,269 [INFO] - Finished server process [9057]
2024-02-21 21:55:46,929 [INFO] - Started server process [9108]
2024-02-21 21:55:46,929 [INFO] - Waiting for application startup.
2024-02-21 21:55:46,929 [INFO] - Application startup complete.
2024-02-21 21:56:20,094 [INFO] - Shutting down
2024-02-21 21:56:20,195 [INFO] - Waiting for application shutdown.
2024-02-21 21:56:20,196 [INFO] - Application shutdown complete.
2024-02-21 21:56:20,196 [INFO] - Finished server process [9108]
2024-02-21 21:56:20,839 [INFO] - Started server process [9188]
2024-02-21 21:56:20,839 [INFO] - Waiting for application startup.
2024-02-21 21:56:20,839 [INFO] - Application startup complete.
2024-02-21 21:57:06,157 [INFO] - Shutting down
2024-02-21 21:57:06,258 [INFO] - Waiting for application shutdown.
2024-02-21 21:57:06,258 [INFO] - Application shutdown complete.
2024-02-21 21:57:06,258 [INFO] - Finished server process [9188]
2024-02-21 21:57:06,883 [INFO] - Started server process [9271]
2024-02-21 21:57:06,884 [INFO] - Waiting for application startup.
2024-02-21 21:57:06,884 [INFO] - Application startup complete.
2024-02-21 22:01:39,700 [INFO] - Shutting down
2024-02-21 22:01:39,801 [INFO] - Waiting for application shutdown.
2024-02-21 22:01:39,802 [INFO] - Application shutdown complete.
2024-02-21 22:01:39,802 [INFO] - Finished server process [9271]
2024-02-21 22:01:40,459 [INFO] - Started server process [9411]
2024-02-21 22:01:40,460 [INFO] - Waiting for application startup.
2024-02-21 22:01:40,460 [INFO] - Application startup complete.
2024-02-21 22:01:58,850 [INFO] - Shutting down
2024-02-21 22:01:58,951 [INFO] - Waiting for application shutdown.
2024-02-21 22:01:58,952 [INFO] - Application shutdown complete.
2024-02-21 22:01:58,953 [INFO] - Finished server process [9411]
2024-02-21 22:01:59,596 [INFO] - Started server process [9484]
2024-02-21 22:01:59,597 [INFO] - Waiting for application startup.
2024-02-21 22:01:59,597 [INFO] - Application startup complete.
2024-02-21 22:08:41,405 [INFO] - Shutting down
2024-02-21 22:08:41,506 [INFO] - Waiting for application shutdown.
2024-02-21 22:08:41,507 [INFO] - Application shutdown complete.
2024-02-21 22:08:41,507 [INFO] - Finished server process [9484]
2024-02-21 22:08:42,127 [INFO] - Started server process [10222]
2024-02-21 22:08:42,127 [INFO] - Waiting for application startup.
2024-02-21 22:08:42,127 [INFO] - Application startup complete.
2024-02-21 22:08:48,658 [INFO] - Shutting down
2024-02-21 22:08:48,759 [INFO] - Waiting for application shutdown.
2024-02-21 22:08:48,760 [INFO] - Application shutdown complete.
2024-02-21 22:08:48,760 [INFO] - Finished server process [10222]
2024-02-21 22:08:49,378 [INFO] - Started server process [10295]
2024-02-21 22:08:49,378 [INFO] - Waiting for application startup.
2024-02-21 22:08:49,378 [INFO] - Application startup complete.
2024-02-21 22:10:39,104 [INFO] - Shutting down
2024-02-21 22:10:39,204 [INFO] - Waiting for application shutdown.
2024-02-21 22:10:39,205 [INFO] - Application shutdown complete.
2024-02-21 22:10:39,205 [INFO] - Finished server process [10295]
2024-02-21 22:10:39,841 [INFO] - Started server process [11119]
2024-02-21 22:10:39,841 [INFO] - Waiting for application startup.
2024-02-21 22:10:39,842 [INFO] - Application startup complete.
2024-02-21 22:10:41,959 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 10, 41, 951770)
2024-02-21 22:10:41,961 [ERROR] - The transaction from Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q== is not valid.
2024-02-21 22:11:37,721 [INFO] - Shutting down
2024-02-21 22:11:37,822 [INFO] - Waiting for application shutdown.
2024-02-21 22:11:37,822 [INFO] - Application shutdown complete.
2024-02-21 22:11:37,822 [INFO] - Finished server process [11119]
2024-02-21 22:11:38,447 [INFO] - Started server process [11265]
2024-02-21 22:11:38,448 [INFO] - Waiting for application startup.
2024-02-21 22:11:38,448 [INFO] - Application startup complete.
2024-02-21 22:12:47,098 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 12, 47, 91573)
2024-02-21 22:12:53,898 [INFO] - Shutting down
2024-02-21 22:12:53,999 [INFO] - Waiting for application shutdown.
2024-02-21 22:12:54,000 [INFO] - Application shutdown complete.
2024-02-21 22:12:54,000 [INFO] - Finished server process [11265]
2024-02-21 22:13:12,760 [INFO] - Started server process [11913]
2024-02-21 22:13:12,760 [INFO] - Waiting for application startup.
2024-02-21 22:13:12,761 [INFO] - Application startup complete.
2024-02-21 22:13:16,984 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 13, 16, 973216)
2024-02-21 22:14:57,951 [INFO] - Shutting down
2024-02-21 22:14:58,052 [INFO] - Waiting for application shutdown.
2024-02-21 22:14:58,053 [INFO] - Application shutdown complete.
2024-02-21 22:14:58,053 [INFO] - Finished server process [11913]
2024-02-21 22:14:58,650 [INFO] - Started server process [12255]
2024-02-21 22:14:58,650 [INFO] - Waiting for application startup.
2024-02-21 22:14:58,650 [INFO] - Application startup complete.
2024-02-21 22:15:47,280 [INFO] - Shutting down
2024-02-21 22:15:47,381 [INFO] - Waiting for application shutdown.
2024-02-21 22:15:47,382 [INFO] - Application shutdown complete.
2024-02-21 22:15:47,382 [INFO] - Finished server process [12255]
2024-02-21 22:15:47,954 [INFO] - Started server process [12388]
2024-02-21 22:15:47,954 [INFO] - Waiting for application startup.
2024-02-21 22:15:47,954 [INFO] - Application startup complete.
2024-02-21 22:16:05,938 [INFO] - Shutting down
2024-02-21 22:16:06,039 [INFO] - Waiting for application shutdown.
2024-02-21 22:16:06,040 [INFO] - Application shutdown complete.
2024-02-21 22:16:06,040 [INFO] - Finished server process [12388]
2024-02-21 22:16:06,637 [INFO] - Started server process [12465]
2024-02-21 22:16:06,637 [INFO] - Waiting for application startup.
2024-02-21 22:16:06,638 [INFO] - Application startup complete.
2024-02-21 22:16:33,869 [INFO] - Shutting down
2024-02-21 22:16:33,970 [INFO] - Waiting for application shutdown.
2024-02-21 22:16:33,971 [INFO] - Application shutdown complete.
2024-02-21 22:16:33,971 [INFO] - Finished server process [12465]
2024-02-21 22:16:34,550 [INFO] - Started server process [12556]
2024-02-21 22:16:34,550 [INFO] - Waiting for application startup.
2024-02-21 22:16:34,550 [INFO] - Application startup complete.
2024-02-21 22:17:40,770 [INFO] - Shutting down
2024-02-21 22:17:40,871 [INFO] - Waiting for application shutdown.
2024-02-21 22:17:40,872 [INFO] - Application shutdown complete.
2024-02-21 22:17:40,872 [INFO] - Finished server process [12556]
2024-02-21 22:17:41,446 [INFO] - Started server process [12644]
2024-02-21 22:17:41,446 [INFO] - Waiting for application startup.
2024-02-21 22:17:41,446 [INFO] - Application startup complete.
2024-02-21 22:17:42,753 [INFO] - Shutting down
2024-02-21 22:17:42,854 [INFO] - Waiting for application shutdown.
2024-02-21 22:17:42,854 [INFO] - Application shutdown complete.
2024-02-21 22:17:42,855 [INFO] - Finished server process [12644]
2024-02-21 22:17:49,391 [INFO] - Started server process [12759]
2024-02-21 22:17:49,391 [INFO] - Waiting for application startup.
2024-02-21 22:17:49,392 [INFO] - Application startup complete.
2024-02-21 22:18:06,909 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 18, 6, 899419)
2024-02-21 22:22:14,902 [INFO] - Shutting down
2024-02-21 22:22:15,003 [INFO] - Waiting for application shutdown.
2024-02-21 22:22:15,003 [INFO] - Application shutdown complete.
2024-02-21 22:22:15,003 [INFO] - Finished server process [12759]
2024-02-21 22:22:15,611 [INFO] - Started server process [13016]
2024-02-21 22:22:15,611 [INFO] - Waiting for application startup.
2024-02-21 22:22:15,611 [INFO] - Application startup complete.
2024-02-21 22:23:08,267 [INFO] - Shutting down
2024-02-21 22:23:08,368 [INFO] - Waiting for application shutdown.
2024-02-21 22:23:08,368 [INFO] - Application shutdown complete.
2024-02-21 22:23:08,368 [INFO] - Finished server process [13016]
2024-02-21 22:23:08,991 [INFO] - Started server process [13362]
2024-02-21 22:23:08,992 [INFO] - Waiting for application startup.
2024-02-21 22:23:08,992 [INFO] - Application startup complete.
2024-02-21 22:24:02,842 [INFO] - Shutting down
2024-02-21 22:24:02,943 [INFO] - Waiting for application shutdown.
2024-02-21 22:24:02,944 [INFO] - Application shutdown complete.
2024-02-21 22:24:02,944 [INFO] - Finished server process [13362]
2024-02-21 22:24:03,560 [INFO] - Started server process [13556]
2024-02-21 22:24:03,561 [INFO] - Waiting for application startup.
2024-02-21 22:24:03,561 [INFO] - Application startup complete.
2024-02-21 22:24:11,400 [INFO] - Shutting down
2024-02-21 22:24:11,501 [INFO] - Waiting for application shutdown.
2024-02-21 22:24:11,502 [INFO] - Application shutdown complete.
2024-02-21 22:24:11,502 [INFO] - Finished server process [13556]
2024-02-21 22:24:17,283 [INFO] - Started server process [13660]
2024-02-21 22:24:17,284 [INFO] - Waiting for application startup.
2024-02-21 22:24:17,284 [INFO] - Application startup complete.
2024-02-21 22:24:29,410 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 24, 29, 400158)
2024-02-21 22:26:15,361 [INFO] - Shutting down
2024-02-21 22:26:15,462 [INFO] - Waiting for application shutdown.
2024-02-21 22:26:15,463 [INFO] - Application shutdown complete.
2024-02-21 22:26:15,463 [INFO] - Finished server process [13660]
2024-02-21 22:26:16,050 [INFO] - Started server process [14194]
2024-02-21 22:26:16,050 [INFO] - Waiting for application startup.
2024-02-21 22:26:16,050 [INFO] - Application startup complete.
2024-02-21 22:26:29,417 [INFO] - Shutting down
2024-02-21 22:26:29,518 [INFO] - Waiting for application shutdown.
2024-02-21 22:26:29,519 [INFO] - Application shutdown complete.
2024-02-21 22:26:29,519 [INFO] - Finished server process [14194]
2024-02-21 22:26:30,108 [INFO] - Started server process [14298]
2024-02-21 22:26:30,108 [INFO] - Waiting for application startup.
2024-02-21 22:26:30,108 [INFO] - Application startup complete.
2024-02-21 22:26:38,952 [INFO] - Shutting down
2024-02-21 22:26:39,053 [INFO] - Waiting for application shutdown.
2024-02-21 22:26:39,053 [INFO] - Application shutdown complete.
2024-02-21 22:26:39,053 [INFO] - Finished server process [14298]
2024-02-21 22:26:39,615 [INFO] - Started server process [14378]
2024-02-21 22:26:39,616 [INFO] - Waiting for application startup.
2024-02-21 22:26:39,616 [INFO] - Application startup complete.
2024-02-21 22:27:03,325 [INFO] - Shutting down
2024-02-21 22:27:03,426 [INFO] - Waiting for application shutdown.
2024-02-21 22:27:03,426 [INFO] - Application shutdown complete.
2024-02-21 22:27:03,426 [INFO] - Finished server process [14378]
2024-02-21 22:27:04,009 [INFO] - Started server process [14536]
2024-02-21 22:27:04,009 [INFO] - Waiting for application startup.
2024-02-21 22:27:04,010 [INFO] - Application startup complete.
2024-02-21 22:27:41,889 [INFO] - Shutting down
2024-02-21 22:27:41,990 [INFO] - Waiting for application shutdown.
2024-02-21 22:27:41,991 [INFO] - Application shutdown complete.
2024-02-21 22:27:41,991 [INFO] - Finished server process [14536]
2024-02-21 22:27:42,573 [INFO] - Started server process [14780]
2024-02-21 22:27:42,574 [INFO] - Waiting for application startup.
2024-02-21 22:27:42,574 [INFO] - Application startup complete.
2024-02-21 22:28:04,774 [INFO] - Shutting down
2024-02-21 22:28:04,876 [INFO] - Waiting for application shutdown.
2024-02-21 22:28:04,876 [INFO] - Application shutdown complete.
2024-02-21 22:28:04,876 [INFO] - Finished server process [14780]
2024-02-21 22:28:05,487 [INFO] - Started server process [14927]
2024-02-21 22:28:05,487 [INFO] - Waiting for application startup.
2024-02-21 22:28:05,488 [INFO] - Application startup complete.
2024-02-21 22:28:15,135 [INFO] - Shutting down
2024-02-21 22:28:15,236 [INFO] - Waiting for application shutdown.
2024-02-21 22:28:15,237 [INFO] - Application shutdown complete.
2024-02-21 22:28:15,237 [INFO] - Finished server process [14927]
2024-02-21 22:28:22,483 [INFO] - Started server process [15066]
2024-02-21 22:28:22,483 [INFO] - Waiting for application startup.
2024-02-21 22:28:22,483 [INFO] - Application startup complete.
2024-02-21 22:28:32,167 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 28, 32, 156738)
2024-02-21 22:28:57,245 [INFO] - Shutting down
2024-02-21 22:28:57,346 [INFO] - Waiting for application shutdown.
2024-02-21 22:28:57,346 [INFO] - Application shutdown complete.
2024-02-21 22:28:57,346 [INFO] - Finished server process [15066]
2024-02-21 22:29:36,266 [INFO] - Started server process [15546]
2024-02-21 22:29:36,266 [INFO] - Waiting for application startup.
2024-02-21 22:29:36,266 [INFO] - Application startup complete.
2024-02-21 22:29:41,687 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 29, 41, 676113)
2024-02-21 22:30:16,059 [INFO] - Shutting down
2024-02-21 22:30:16,160 [INFO] - Waiting for application shutdown.
2024-02-21 22:30:16,161 [INFO] - Application shutdown complete.
2024-02-21 22:30:16,161 [INFO] - Finished server process [15546]
2024-02-21 22:30:16,766 [INFO] - Started server process [15870]
2024-02-21 22:30:16,767 [INFO] - Waiting for application startup.
2024-02-21 22:30:16,767 [INFO] - Application startup complete.
2024-02-21 22:30:58,963 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 30, 58, 954946)
2024-02-21 22:31:29,029 [INFO] - Shutting down
2024-02-21 22:31:29,130 [INFO] - Waiting for application shutdown.
2024-02-21 22:31:29,131 [INFO] - Application shutdown complete.
2024-02-21 22:31:29,131 [INFO] - Finished server process [15870]
2024-02-21 22:31:29,741 [INFO] - Started server process [16376]
2024-02-21 22:31:29,741 [INFO] - Waiting for application startup.
2024-02-21 22:31:29,742 [INFO] - Application startup complete.
2024-02-21 22:31:35,769 [INFO] - Shutting down
2024-02-21 22:31:35,870 [INFO] - Waiting for application shutdown.
2024-02-21 22:31:35,870 [INFO] - Application shutdown complete.
2024-02-21 22:31:35,870 [INFO] - Finished server process [16376]
2024-02-21 22:31:36,494 [INFO] - Started server process [16435]
2024-02-21 22:31:36,494 [INFO] - Waiting for application startup.
2024-02-21 22:31:36,495 [INFO] - Application startup complete.
2024-02-21 22:31:48,689 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 31, 48, 678882)
2024-02-21 22:32:29,054 [INFO] - Shutting down
2024-02-21 22:32:29,155 [INFO] - Waiting for application shutdown.
2024-02-21 22:32:29,156 [INFO] - Application shutdown complete.
2024-02-21 22:32:29,156 [INFO] - Finished server process [16435]
2024-02-21 22:33:26,493 [INFO] - Started server process [16952]
2024-02-21 22:33:26,494 [INFO] - Waiting for application startup.
2024-02-21 22:33:26,494 [INFO] - Application startup complete.
2024-02-21 22:33:38,349 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 33, 38, 337440)
2024-02-21 22:33:45,681 [INFO] - Shutting down
2024-02-21 22:33:45,782 [INFO] - Waiting for application shutdown.
2024-02-21 22:33:45,783 [INFO] - Application shutdown complete.
2024-02-21 22:33:45,783 [INFO] - Finished server process [16952]
2024-02-21 22:35:21,788 [INFO] - Started server process [17400]
2024-02-21 22:35:21,788 [INFO] - Waiting for application startup.
2024-02-21 22:35:21,789 [INFO] - Application startup complete.
2024-02-21 22:35:29,580 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 35, 29, 571533)
2024-02-21 22:35:38,063 [INFO] - Shutting down
2024-02-21 22:35:38,164 [INFO] - Waiting for application shutdown.
2024-02-21 22:35:38,165 [INFO] - Application shutdown complete.
2024-02-21 22:35:38,165 [INFO] - Finished server process [17400]
2024-02-21 22:36:05,071 [INFO] - Started server process [17735]
2024-02-21 22:36:05,071 [INFO] - Waiting for application startup.
2024-02-21 22:36:05,071 [INFO] - Application startup complete.
2024-02-21 22:36:05,976 [INFO] - Shutting down
2024-02-21 22:36:06,077 [INFO] - Waiting for application shutdown.
2024-02-21 22:36:06,078 [INFO] - Application shutdown complete.
2024-02-21 22:36:06,078 [INFO] - Finished server process [17735]
2024-02-21 22:36:11,323 [INFO] - Started server process [17838]
2024-02-21 22:36:11,323 [INFO] - Waiting for application startup.
2024-02-21 22:36:11,324 [INFO] - Application startup complete.
2024-02-21 22:36:18,654 [INFO] - Creating transaction: sender='Ql0eTrcebm+PVRDrCwR+CqgBaEmUBjHXGxB7xVH/XbLkP7UcRWoy7/5mCW/mNNMBormk7xLOOW0Hi0Tvvo9FBxb/LUcetIwy/pRJ7w7FM0qDISGHNoIpqzu9HZYYNC7CJHDuSyR47cc6BAqvQYZ4XriTmV7iaouq8iMHhahSZE3A4BbHEuZNic6NmAvMyGefMAyjwvxPPTvispM3uymLifHPmxc9QTDoLhXK78/K0j1cjw1da/yWldfZxyunLOTQxKnaOfjrAbNlUr5ri9PfgGC/nIBNtV1RirPi1gMyG87b3M76vtkjyBgByNM55nYHl04AYqE0rcfvKH1w7oZDYl4mt3jIIePhuqrCk3CafsV518QGZDyd3XvzSqTMc9IsBMr9xuv7YHSKdIXfPSprKFhX+7aNuV7EMLZbWvs2waAUGzL2xtEheP1mg2QmqNW4/8wfxxo4f/+ze0Sr3XUPS1HIRZiIN1LB0AuXbla/DNrokmGdZUZ0uUvIAD6Zd2TqdghiGrFt9pS9UjdzuN7gGnl5D3HY4aE6fgk8tIMAUyC+I9Je/FGEZ3t0fQ+srkG0rIq3poNS5YvqX7JKZ0jJQiypN1I7YtkV7+EUoJNxppT34NsfEtTDoY1vuUlIqJbZQITzaoG88hhgSQE8iavja935Zc87/nspp6rRDFMcwkZ4QxvPnMtwU0KyckbpYJA57928JUVQNJKQRi0NyzV+4kCfhpDyUr9wFNOfthdq7BY35kvzR0841JLy3yTnsdmFsnPs/Gjh8jf1xDigrFCvhRzu+UzKsmA3l9Ew8S9M0jvk7x6EviwmHBUK1fFKUCHBKGM7L7c+IzdMzImxF/hR+td36kCSmbgkfTSJhUan6TcoByZfFRj6WBxM9QwTWPTyC+fVoOvNbZYIuov/VHaaLqc0jH2cb1Ojgcf7TB8L1X2uAt79GGOAsJOe/oqw66P6wRIrYdmLnK6IF18AJDkD8ecle1pYFzf4DfdwNNQsTYaRxYmrloA+I2hrAhSrzS4zPKsc8rtDbUZzm2zLyU9lq/1B1R2RvK3+JaOmYefFdzEY7IP3XXhHDDt/jiL6aGti1ymxkwX1lj9Bc5bKccL2nTIHf1xDYZcYONvvVfDyLZNwc/u9SaxWf3l9xLsoMEJZdAhsmY093EkABsivb8g/rGCMF0K3sdl7pEDpIPd5qH3IGGZn7UCeds6P5qD+gRZa5pxvLN3qKbLS9mHSDnZgzyW/QR5o57ekfhq2LzZZJlm8S3u1lDev4nJRQjlXDMPWLrhB9/Bpjx4nuQOksQPtjBBrbvXLEWI3om7F7ch6n/QxbsPsmKwLqEJozi3jYHVKdfXN60AAg6RbB5oPvueCq7lJL5wpCJM44zHRJCCmY7F8abZTVLx39FA4aIb9JwwgoJDttTAjjLTrzbeIMsx//eX/yY+3ZSvXx5GWVKJ/d9HmT4D23k9oOK4c0baj5k3UGrTmxDZhxMv98y+umgeAQoQZFV36ivjsbwDS/NbMYQkjkLjC7PjqblHAY8QoghZd1sfMb2CidhPgNKbTXvs43stDJ82a+oGzh0RC4PYXlzLcaDXGwzEM7AhqKWoTQnuGMcFdYvapxv5ahaBvM9VE2kevdnwkUj80tWTlCws71nXmkGtYJGgmbmTMelecxUAU4T1Hq2HInU7YWxfDkCSKdvmQyrJj1CeLsiGkkPSZReJGA27iKv6sN3OrrEhz4CrEgQK1Rt80BN8hsfByPs+s1Q==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 36, 18, 643751)
2024-02-21 22:36:38,348 [INFO] - Shutting down
2024-02-21 22:36:38,449 [INFO] - Waiting for application shutdown.
2024-02-21 22:36:38,450 [INFO] - Application shutdown complete.
2024-02-21 22:36:38,450 [INFO] - Finished server process [17838]
2024-02-21 22:37:31,311 [INFO] - Started server process [18240]
2024-02-21 22:37:31,311 [INFO] - Waiting for application startup.
2024-02-21 22:37:31,311 [INFO] - Application startup complete.
2024-02-21 22:37:39,058 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    if deadline <= int(time.time()):\n        raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 3, 37, 39, 50839)
2024-02-21 22:37:52,409 [INFO] - Shutting down
2024-02-21 22:37:52,511 [INFO] - Waiting for application shutdown.
2024-02-21 22:37:52,512 [INFO] - Application shutdown complete.
2024-02-21 22:37:52,512 [INFO] - Finished server process [18240]
2024-02-21 22:37:55,167 [INFO] - Started server process [18532]
2024-02-21 22:37:55,167 [INFO] - Waiting for application startup.
2024-02-21 22:37:55,167 [INFO] - Application startup complete.
2024-02-21 22:38:35,767 [INFO] - Shutting down
2024-02-21 22:38:35,868 [INFO] - Waiting for application shutdown.
2024-02-21 22:38:35,869 [INFO] - Application shutdown complete.
2024-02-21 22:38:35,869 [INFO] - Finished server process [18532]
2024-02-21 22:50:46,824 [INFO] - Started server process [19075]
2024-02-21 22:50:46,824 [INFO] - Waiting for application startup.
2024-02-21 22:50:46,824 [INFO] - Application startup complete.
2024-02-21 22:51:33,353 [INFO] - Shutting down
2024-02-21 22:51:33,453 [INFO] - Waiting for application shutdown.
2024-02-21 22:51:33,454 [INFO] - Application shutdown complete.
2024-02-21 22:51:33,454 [INFO] - Finished server process [19075]
2024-02-21 22:51:34,056 [INFO] - Started server process [19479]
2024-02-21 22:51:34,057 [INFO] - Waiting for application startup.
2024-02-21 22:51:34,057 [INFO] - Application startup complete.
2024-02-21 22:52:04,000 [INFO] - Shutting down
2024-02-21 22:52:04,101 [INFO] - Waiting for application shutdown.
2024-02-21 22:52:04,102 [INFO] - Application shutdown complete.
2024-02-21 22:52:04,103 [INFO] - Finished server process [19479]
2024-02-21 22:52:04,702 [INFO] - Started server process [19744]
2024-02-21 22:52:04,702 [INFO] - Waiting for application startup.
2024-02-21 22:52:04,702 [INFO] - Application startup complete.
2024-02-21 22:52:11,834 [INFO] - Shutting down
2024-02-21 22:52:11,935 [INFO] - Waiting for application shutdown.
2024-02-21 22:52:11,935 [INFO] - Application shutdown complete.
2024-02-21 22:52:11,936 [INFO] - Finished server process [19744]
2024-02-21 22:52:12,541 [INFO] - Started server process [19849]
2024-02-21 22:52:12,541 [INFO] - Waiting for application startup.
2024-02-21 22:52:12,541 [INFO] - Application startup complete.
2024-02-21 22:52:48,307 [INFO] - Shutting down
2024-02-21 22:52:48,408 [INFO] - Waiting for application shutdown.
2024-02-21 22:52:48,409 [INFO] - Application shutdown complete.
2024-02-21 22:52:48,409 [INFO] - Finished server process [19849]
2024-02-21 22:52:49,008 [INFO] - Started server process [20166]
2024-02-21 22:52:49,009 [INFO] - Waiting for application startup.
2024-02-21 22:52:49,009 [INFO] - Application startup complete.
2024-02-21 22:53:05,889 [INFO] - Shutting down
2024-02-21 22:53:05,990 [INFO] - Waiting for application shutdown.
2024-02-21 22:53:05,991 [INFO] - Application shutdown complete.
2024-02-21 22:53:05,992 [INFO] - Finished server process [20166]
2024-02-21 22:53:06,604 [INFO] - Started server process [20355]
2024-02-21 22:53:06,604 [INFO] - Waiting for application startup.
2024-02-21 22:53:06,604 [INFO] - Application startup complete.
2024-02-21 22:54:01,478 [INFO] - Shutting down
2024-02-21 22:54:01,579 [INFO] - Waiting for application shutdown.
2024-02-21 22:54:01,580 [INFO] - Application shutdown complete.
2024-02-21 22:54:01,580 [INFO] - Finished server process [20355]
2024-02-21 22:54:02,183 [INFO] - Started server process [20768]
2024-02-21 22:54:02,183 [INFO] - Waiting for application startup.
2024-02-21 22:54:02,183 [INFO] - Application startup complete.
2024-02-21 22:54:05,272 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 3, 54, 5, 268113)
2024-02-21 22:54:13,235 [INFO] - Shutting down
2024-02-21 22:54:13,336 [INFO] - Waiting for application shutdown.
2024-02-21 22:54:13,336 [INFO] - Application shutdown complete.
2024-02-21 22:54:13,337 [INFO] - Finished server process [20768]
2024-02-21 22:54:31,034 [INFO] - Started server process [20968]
2024-02-21 22:54:31,034 [INFO] - Waiting for application startup.
2024-02-21 22:54:31,034 [INFO] - Application startup complete.
2024-02-21 22:54:34,451 [INFO] - Shutting down
2024-02-21 22:54:34,552 [INFO] - Waiting for application shutdown.
2024-02-21 22:54:34,553 [INFO] - Application shutdown complete.
2024-02-21 22:54:34,553 [INFO] - Finished server process [20968]
2024-02-21 22:57:45,989 [INFO] - Started server process [21241]
2024-02-21 22:57:45,989 [INFO] - Waiting for application startup.
2024-02-21 22:57:45,990 [INFO] - Application startup complete.
2024-02-21 22:57:52,050 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 3, 57, 52, 44323)
2024-02-21 22:57:57,854 [INFO] - Shutting down
2024-02-21 22:57:57,955 [INFO] - Waiting for application shutdown.
2024-02-21 22:57:57,955 [INFO] - Application shutdown complete.
2024-02-21 22:57:57,955 [INFO] - Finished server process [21241]
2024-02-21 22:59:22,933 [INFO] - Started server process [21482]
2024-02-21 22:59:22,934 [INFO] - Waiting for application startup.
2024-02-21 22:59:22,934 [INFO] - Application startup complete.
2024-02-21 22:59:26,950 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 3, 59, 26, 942546)
2024-02-21 22:59:31,780 [INFO] - Shutting down
2024-02-21 22:59:31,880 [INFO] - Waiting for application shutdown.
2024-02-21 22:59:31,881 [INFO] - Application shutdown complete.
2024-02-21 22:59:31,881 [INFO] - Finished server process [21482]
2024-02-21 23:00:22,218 [INFO] - Started server process [21659]
2024-02-21 23:00:22,218 [INFO] - Waiting for application startup.
2024-02-21 23:00:22,218 [INFO] - Application startup complete.
2024-02-21 23:00:23,694 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 0, 23, 685475)
2024-02-21 23:00:36,497 [INFO] - Shutting down
2024-02-21 23:00:36,598 [INFO] - Waiting for application shutdown.
2024-02-21 23:00:36,599 [INFO] - Application shutdown complete.
2024-02-21 23:00:36,599 [INFO] - Finished server process [21659]
2024-02-21 23:01:23,097 [INFO] - Started server process [21874]
2024-02-21 23:01:23,098 [INFO] - Waiting for application startup.
2024-02-21 23:01:23,098 [INFO] - Application startup complete.
2024-02-21 23:01:24,489 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 1, 24, 480934)
2024-02-21 23:01:28,826 [INFO] - Shutting down
2024-02-21 23:01:28,927 [INFO] - Waiting for application shutdown.
2024-02-21 23:01:28,927 [INFO] - Application shutdown complete.
2024-02-21 23:01:28,928 [INFO] - Finished server process [21874]
2024-02-21 23:01:58,908 [INFO] - Started server process [22040]
2024-02-21 23:01:58,909 [INFO] - Waiting for application startup.
2024-02-21 23:01:58,909 [INFO] - Application startup complete.
2024-02-21 23:01:59,952 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 1, 59, 946298)
2024-02-21 23:02:05,141 [INFO] - Shutting down
2024-02-21 23:02:05,242 [INFO] - Waiting for application shutdown.
2024-02-21 23:02:05,243 [INFO] - Application shutdown complete.
2024-02-21 23:02:05,243 [INFO] - Finished server process [22040]
2024-02-21 23:03:43,153 [INFO] - Started server process [22715]
2024-02-21 23:03:43,153 [INFO] - Waiting for application startup.
2024-02-21 23:03:43,153 [INFO] - Application startup complete.
2024-02-21 23:03:44,713 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 3, 44, 706337)
2024-02-21 23:03:49,082 [INFO] - Shutting down
2024-02-21 23:03:49,183 [INFO] - Waiting for application shutdown.
2024-02-21 23:03:49,184 [INFO] - Application shutdown complete.
2024-02-21 23:03:49,184 [INFO] - Finished server process [22715]
2024-02-21 23:04:51,384 [INFO] - Started server process [22913]
2024-02-21 23:04:51,384 [INFO] - Waiting for application startup.
2024-02-21 23:04:51,385 [INFO] - Application startup complete.
2024-02-21 23:04:52,491 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='AdR7WAj4kK73+D57IPXQ65NiBQRAjPlU/4OJm/tzqG72Gy7G42XYS3OJyiOUELjQWhpYv4y0joq8/47kfe9h9Xy/DXPn4OxatLUThX7tRHSo029sEXNuBjz/9v8WkcT/pc5L40nkvxKyPXtYZDuixwFARPhYVkXLajkK5iY8AamCdfnkb3WDdeJHqAx4d+V2dU4NabltsM3ETr/tG6wj1ybWQHgO/BJaYe7ZOS/voxZx+VPGgK/dRxtzJynNYFCGXAW73fOlJL6rJnAs8T3mv9TelC8u8yEVDP61xoU4f3oIzm3w/NrsgqrmxSuFvPBRNWoIZsE9Xl/s8BNw8wHRXAJHV5hUzfx8kJtLpHjuTXkOWzyeMbFkOQty8KgxoFJfcmm8WkBJC51AbfweWzSmNkwPqf+5FL6OpK6ASN8hwBgpoP3d4tEjLxX0t7ypFB9+LIXn2vW/OW6A3IHcFwvJlJ/3zH7ROc5sItPvnW61eKh8ks/kvAcOvlsOBF719iKHt/WNC8CxrfgfkFlLo0q7gjdxltNOEeHxsMHwWdRE08e+udr1zDN1byb3ToPxnZqSLsN1jTmFCtoR44o0kuu5l0a3bEJqOkhWNoQKSVsyDMtD9JV67N+KjUkacQYWvaHXS1RXgeix25vfVKyeAKKVHRfESyjvr5B93Fk+Hl14H4LnC48ZVTkOkVoC4m0zqmKDA0y0+e3DdYKc19AnkUm6xbbxNjHp87y4BoVck7UeSqkmNRS3MdDLGT62/HYeZ8a/jZq0h08V4zXFKPk79VY2RqQXKIN6cFVRQZYbDwkBjEUskG/AM92dxyihg1+1OFk5gE+XTWyIF5pKjzdgtBL56JMOTpRBrCJ3gQQP2///0KooFEGg8X9dkugsmouk5V8nFdd2Hu1ti4DVhv3XoSukE/OTCrubmaw7RnXlbsR/DizI0TsAVYaHy3GOfyoJVUaal9h8PXvvgzZekmifCzcfWq15fS04excy+lJPTen+qOSawqvXhsrojeeR30Bw15/zOAd2AdPFzJLck0Qn59XR7SRxUYC4F9IJplPuKjGoIoCG7XkLN9JcySL3Zu16r/NsvGYdEjbGL1nleFS7nUwLIpSzuIWTnS2biXIUMz7LnqxXETTX/YPrzvH0RmrI84fgEBpkMf2LSW2QQn/Om/DSdVsLBUlR2dr5YRRbD+427vAPpp01dQ18x8C8VfdZuC5MwPS39tg/nQcgUPoNLSXy8prjBzCjvPErBDVn/gHKkCB5xNJmYLhi3dHKxqlFhWu1bkYdxDM8d6qFTYFu3qr/G9g8gbkLF4HmHe4bpdrFhB/m5yKRJPHNUxdFkaQLQClMP/w3figE2LUyWcdGfWgEOEyeVCtSbFqBue/j9IPcWglFN7/alvIz3bVAMqSGmRdpgya5Pneb41iPZObARBnmkrlKuIOrQfk78mRtzfSN7T1L5nkwVGafOXnmVAWHky9N5gTcla6WhMhW5Z7PoENPMZrIqsBOr7y3ncM6nYfza751/JVdhWUWwj9JQOIWeIlu9LH5O5/526zjHqbs6+cpScoB/xKeatF1I60JL1oDWDtwly1pkxLW6JFFuzHBcU6ioJjPeYXqaw23HIZSrAiW5Nb/ylPDxX0QkBMifYOZuO8qrNfALfqxh4ZA7GwABYF6HE7g5z/DGVbB0PqSNQcasp/6cBD/pN4NEH0XT9uJbQ+LZyJQanYUqwfn+MvRdn1dD/Se50MgQwrdt9spYZF8jHrzw8kpAy6eRpskuvrE6zEtQlSzC/JAz7GtAp59xK211agPz7ZDxYEzR4Y06rl9dU7jzGqbiVjemxtlFXcH+7K1Ug3HqeX+vI7usLA+ruJTPsiAs1L3e1OF640jyHL0qFxKmp4W812hQH44bN7uw1dz0MKzq1rjsuruFygas2Vd0U8ABxaQJTRpgyGOBT3XSuIYT4ooIdkfIJVAeZdt9z5pxTkQgnXh7pYE4Uk6cw+YQTCUxsUiRNPylJwQt0fhVPQlhTqvq0RbPe13GRawv9+eW1Y6YFmPcND54a+ke/pS8D7OHakzsofkxl4HbS3bVGs7pOfGTWzXKPV9zZbh/NZRl/cCbE0QxjR7uNsw6I4+eZMLmVf8RjA7itlm5qGBMUinvut81qq4pto4tYfh2iLx8QXBOTeSF6alD7O7euSOP+UiOI13RfxOroL5noL70gUvO4MKKSPpQmHfVSpzS0KQ0KP6PUMSRsEhew++w+fYViPplCwdyAnfvoPDM+vbEeDXgA0CzSb6ytn01q0vrHsg306MPRX5rjJT8Un0ZBKitUx2c6aXFRbGCEFoa3NkdaezQGJ5d6dteyqFr/Ksed9PfRJNb9wMYZVwOhODBrYDdsM5RzXzx2iA/e41O6psUASBWQVcs1R05dSzN08OkmOulLP6xDnimWtGcpwh5as/RGtKk4kIUz/uNUPkxk+EMmeBneNUZfnPLBVykmWlGzUzHVR46PqpCwTPhUEcKqCyVvpeLQMzbghWCSEf+Tjf4HbYxJkYWpuppn8tL4t1U7HA1HmufGn8XeHRTHvUJJ8QT9VwxcxkruQGGHOGf1gGQo145i4Z0pTNKEdrN5Ooyc06Wwu2LZxB6g8+fFSKgmviK8gjTbd39k8RNRHpvRiMdLMDaBcqQ4ZWpwC0YS8kaQSu6DfAzK9uyA72KLvHatP7n3dhLkX/d2apL4L9QM2+BwsJEYQWPg7aXseronVlacRmEoOyYVgG6ZHFwa9VOyPOKsbG2G3GEDrPMPSiGsy2otMSSnd6y/59NGpRPV6bxNHNr6FkpBaDHTli/L15FDS0RgRjgveYeYYZ/pJDf6p79KXKpdkQkU5hM3/Y15CfsM3EPnvjVuf7IOmRpHvXC5Mi1n0asJEM7mH7AubiQ6q+rrQuevu2vlzaeclb4Qvn7RbiN6/OOkEmYiMg4Iz3QBD3R3FCJodBEQgjPRnQLHR2BLahD6Ppxnni7Ffpgu5yXW3zYM4qENqDGdfmpdEbMPnYt2rdUp1mGIiAr+4k28Ls/aHZ5dBaVeYcIozCM3IlcysND+IAmjvCBBKjCTvcloNCiK4RAlE58TnfEH45dagmO5e8V1ECZY1JaZ4MpI+0xP8KG0BLWlt5fZ6uvM0GOEidtLfDxNQJDRoyNDU6PEhOVltkeIinrLW/wvQMFiUyNz9MaHB6jI+SmqO00ObnAAAAAAAAAAAAAAAAAAAAAAAAAAwVKj0=' created=datetime.datetime(2024, 2, 22, 4, 4, 52, 482247)
2024-02-21 23:05:14,407 [INFO] - Shutting down
2024-02-21 23:05:14,508 [INFO] - Waiting for application shutdown.
2024-02-21 23:05:14,508 [INFO] - Application shutdown complete.
2024-02-21 23:05:14,508 [INFO] - Finished server process [22913]
2024-02-21 23:05:40,413 [INFO] - Started server process [23164]
2024-02-21 23:05:40,413 [INFO] - Waiting for application startup.
2024-02-21 23:05:40,413 [INFO] - Application startup complete.
2024-02-21 23:05:43,086 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 5, 43, 78263)
2024-02-21 23:05:53,178 [INFO] - Shutting down
2024-02-21 23:05:53,280 [INFO] - Waiting for application shutdown.
2024-02-21 23:05:53,280 [INFO] - Application shutdown complete.
2024-02-21 23:05:53,280 [INFO] - Finished server process [23164]
2024-02-21 23:05:58,032 [INFO] - Started server process [23389]
2024-02-21 23:05:58,032 [INFO] - Waiting for application startup.
2024-02-21 23:05:58,032 [INFO] - Application startup complete.
2024-02-21 23:07:04,976 [INFO] - Shutting down
2024-02-21 23:07:05,077 [INFO] - Waiting for application shutdown.
2024-02-21 23:07:05,078 [INFO] - Application shutdown complete.
2024-02-21 23:07:05,078 [INFO] - Finished server process [23389]
2024-02-21 23:07:05,776 [INFO] - Started server process [23929]
2024-02-21 23:07:05,777 [INFO] - Waiting for application startup.
2024-02-21 23:07:05,777 [INFO] - Application startup complete.
2024-02-21 23:07:22,163 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'create_voting', 'args': ['9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==', 'binary', None, True, 1708575839, False], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 7, 22, 154689)
2024-02-21 23:08:07,938 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'show_results', 'args': ['ee6b29692596b1892728e36b594f8b173068c78aafc17fa7d5a5a65854b8630e'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 8, 7, 931880)
2024-02-21 23:08:30,331 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'create_voting', 'args': ['9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==', 'binary', None, True, 1708574917, False], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 8, 30, 324305)
2024-02-21 23:08:49,926 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'show_results', 'args': ['39ad36b61ca69a7aa400b671cb1ef09212c35a2d240e0e47431c0d12f3a196dd'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 8, 49, 919870)
2024-02-21 23:11:34,171 [INFO] - Shutting down
2024-02-21 23:11:34,272 [INFO] - Waiting for application shutdown.
2024-02-21 23:11:34,273 [INFO] - Application shutdown complete.
2024-02-21 23:11:34,274 [INFO] - Finished server process [23929]
2024-02-21 23:11:34,962 [INFO] - Started server process [25804]
2024-02-21 23:11:34,962 [INFO] - Waiting for application startup.
2024-02-21 23:11:34,963 [INFO] - Application startup complete.
2024-02-21 23:11:54,066 [INFO] - Shutting down
2024-02-21 23:11:54,167 [INFO] - Waiting for application shutdown.
2024-02-21 23:11:54,168 [INFO] - Application shutdown complete.
2024-02-21 23:11:54,169 [INFO] - Finished server process [25804]
2024-02-21 23:11:54,857 [INFO] - Started server process [25947]
2024-02-21 23:11:54,857 [INFO] - Waiting for application startup.
2024-02-21 23:11:54,857 [INFO] - Application startup complete.
2024-02-21 23:11:59,476 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 11, 59, 473175)
2024-02-21 23:12:31,399 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'show_results', 'args': ['ee6b29692596b1892728e36b594f8b173068c78aafc17fa7d5a5a65854b8630e'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 12, 31, 391662)
2024-02-21 23:12:46,141 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'create_voting', 'args': ['9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==', 'binary', None, True, 1708575173, False], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 12, 46, 134356)
2024-02-21 23:12:59,212 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'show_results', 'args': ['10055303a1a483c105df8ea336052078f6e566d474db9810db9a5f83a4dfb75c'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 12, 59, 207114)
2024-02-21 23:13:19,387 [INFO] - Shutting down
2024-02-21 23:13:19,488 [INFO] - Waiting for application shutdown.
2024-02-21 23:13:19,489 [INFO] - Application shutdown complete.
2024-02-21 23:13:19,490 [INFO] - Finished server process [25947]
2024-02-21 23:13:20,153 [INFO] - Started server process [26645]
2024-02-21 23:13:20,153 [INFO] - Waiting for application startup.
2024-02-21 23:13:20,154 [INFO] - Application startup complete.
2024-02-21 23:13:47,303 [INFO] - Shutting down
2024-02-21 23:13:47,404 [INFO] - Waiting for application shutdown.
2024-02-21 23:13:47,404 [INFO] - Application shutdown complete.
2024-02-21 23:13:47,404 [INFO] - Finished server process [26645]
2024-02-21 23:13:48,081 [INFO] - Started server process [26726]
2024-02-21 23:13:48,082 [INFO] - Waiting for application startup.
2024-02-21 23:13:48,082 [INFO] - Application startup complete.
2024-02-21 23:15:01,814 [INFO] - Shutting down
2024-02-21 23:15:01,915 [INFO] - Waiting for application shutdown.
2024-02-21 23:15:01,916 [INFO] - Application shutdown complete.
2024-02-21 23:15:01,916 [INFO] - Finished server process [26726]
2024-02-21 23:15:03,658 [INFO] - Started server process [26879]
2024-02-21 23:15:03,658 [INFO] - Waiting for application startup.
2024-02-21 23:15:03,659 [INFO] - Application startup complete.
2024-02-21 23:15:14,228 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='65121a8858aef5b351819e52c738250a8a57b286dda750205aac27e32b138ffb' payload={'function_signature': 'create_voting', 'args': ['9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==', 'binary', None, True, 1708575321, False], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 15, 14, 219732)
2024-02-21 23:15:30,626 [INFO] - Shutting down
2024-02-21 23:15:30,727 [INFO] - Waiting for application shutdown.
2024-02-21 23:15:30,728 [INFO] - Application shutdown complete.
2024-02-21 23:15:30,728 [INFO] - Finished server process [26879]
2024-02-21 23:15:33,087 [INFO] - Started server process [27169]
2024-02-21 23:15:33,087 [INFO] - Waiting for application startup.
2024-02-21 23:15:33,088 [INFO] - Application startup complete.
2024-02-21 23:15:50,592 [INFO] - Shutting down
2024-02-21 23:15:50,693 [INFO] - Waiting for application shutdown.
2024-02-21 23:15:50,694 [INFO] - Application shutdown complete.
2024-02-21 23:15:50,695 [INFO] - Finished server process [27169]
2024-02-21 23:18:25,279 [INFO] - Started server process [27428]
2024-02-21 23:18:25,279 [INFO] - Waiting for application startup.
2024-02-21 23:18:25,280 [INFO] - Application startup complete.
2024-02-21 23:19:09,590 [INFO] - Shutting down
2024-02-21 23:19:09,691 [INFO] - Waiting for application shutdown.
2024-02-21 23:19:09,692 [INFO] - Application shutdown complete.
2024-02-21 23:19:09,692 [INFO] - Finished server process [27428]
2024-02-21 23:19:10,343 [INFO] - Started server process [27999]
2024-02-21 23:19:10,343 [INFO] - Waiting for application startup.
2024-02-21 23:19:10,343 [INFO] - Application startup complete.
2024-02-21 23:19:20,989 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address=None payload='import time\nimport hashlib\n\n# Voting structure\nclass Voting:\n    def __init__(self, creator, vote_type, options, public, deadline, weight_by_token):\n        self.creator = creator\n        self.vote_type = vote_type  # \'binary\' o \'multiple\'\n        self.options = options if vote_type == \'multiple\' else [\'yes\', \'no\']\n        self.public = public\n        self.deadline = deadline\n        self.weight_by_token = weight_by_token\n        self.voters = {} # Dict to store the voters and their votes\n        self.results = None\n\nglobal_voting_counter = 0  # Global counter for votings\n\n# Function to create a new voting\ndef create_voting(creator, vote_type, options, public, deadline, weight_by_token):\n    """\n    Create a new voting in the system.\n\n    Parameters:\n    creator (str): Public key of the voting creator.\n    vote_type (str): Type of voting (\'si_no\' or \'multiple\').\n    options (list): Options for voting, applicable for \'multiple\' type.\n    public (bool): True for public voting, False for private.\n    deadline (int): Timestamp for the voting deadline.\n    weight_by_token (bool): True if the vote weight depends on token amount.\n\n    Returns:\n    str: ID of the created voting.\n    """\n    global global_voting_counter\n\n    if vote_type not in [\'binary\', \'multiple\']:\n        raise ValueError("Invalid voting type. Choose \'binary\' or \'multiple\'.")\n\n    #if deadline <= int(time.time()):\n    #    raise ValueError("The deadline must be set in the future.")\n\n    # Increment the global counter\n    global_voting_counter += 1\n\n    # Create a unique hash ID for the voting\n    voting_id = hashlib.sha256(f"{creator}{vote_type}{options}{public}{deadline}{global_voting_counter}".encode()).hexdigest()\n\n    new_voting = Voting(creator, vote_type, options, public, deadline, weight_by_token)\n    state["votings"][voting_id] = new_voting\n\n    return voting_id\n\n# Function to add a voter to a voting\ndef add_voter(voting_id, voter, assigned_tokens, public_key):\n    """\n    Add a voter to a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    assigned_tokens (int): Number of tokens assigned to the voter.\n    public_key (str): Public key of the user calling the function.\n    \n    Returns:\n    bool: True if the voter was added successfully, False otherwise.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the request is made by the voting creator\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can add voters.")\n\n    # Add the voter\n    voting.voters[voter] = {\n        "tokens": assigned_tokens,\n        "has_voted": False\n    }\n\n    return True\n\n# Function to vote in a voting considering public and private voting types\ndef vote(voting_id, voter, vote):\n    """\n    Cast a vote in a specific voting, considering public and private voting types.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    vote: Vote cast by the voter, can be encrypted for private votings.\n\n    Returns:\n    bool: True if the vote was cast successfully, False otherwise.\n    """\n    # Check if the voting exists and is open\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.deadline:\n        raise ValueError("The voting period has ended.")\n\n    # Check if the voter is eligible and has not voted\n    if voter not in voting.votantes or voting.votantes[voter]["has_voted"]:\n        raise PermissionError("Voter is not eligible or has already voted.")\n\n    # Encrypt the vote for private votings\n    if not voting.public:\n        vote = encrypt_vote(vote)\n\n    # Cast the vote\n    voting.voters[voter]["vote"] = vote\n    voting.voters[voter]["has_voted"] = True\n\n    return True\n\n# Function to encrypt a vote (placeholder, needs proper encryption implementation)\ndef encrypt_vote(vote):\n    """\n    Encrypt a vote for private voting.\n\n    Parameters:\n    vote: Vote to be encrypted.\n\n    Returns:\n    Encrypted vote.\n    """\n    # This is a placeholder for encryption logic\n    return "encrypted_" + str(vote)\n\n# Function to decrypt a vote (simulated decryption)\ndef decrypt_vote(encrypted_vote):\n    """\n    Decrypt a vote for private voting.\n\n    Parameters:\n    encrypted_vote: Encrypted vote.\n\n    Returns:\n    Decrypted vote.\n    """\n    return encrypted_vote.replace("encrypted_", "")\n\n# Function to show the results of a voting\ndef show_results(voting_id):\n    """\n    Calculate and display the results of a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n\n    Returns:\n    dict: A dictionary with the results of the voting.\n    """\n    # Check if the voting exists\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n\n    # Check if the voting period has ended\n    if int(time.time()) <= voting.deadline:\n        raise ValueError("The voting is still ongoing.")\n\n    # Initialize the results dictionary\n    results = {option: 0 for option in voting.options}\n\n    # Calculate the results\n    for voter, info in voting.voters.items():\n        if info["has_voted"]:\n            vote = info["vote"]\n\n            # Decrypt the vote for private votings\n            if not voting.public:\n                vote = decrypt_vote(vote)\n\n            vote_weight = info["tokens"] if voting.weight_by_token else 1\n            results[vote] += vote_weight\n\n    # Store the results in the voting object\n    voting.results = results\n\n    return results\n\n# Function to assign tokens to a voter\ndef assign_tokens(voting_id, voter, amount, public_key):\n    """\n    Assign tokens to a voter in a specific voting.\n\n    Parameters:\n    voting_id (str): ID of the voting.\n    voter (str): Public key of the voter.\n    amount (int): Number of tokens to assign.\n    public_key (str): Public key of the user calling the function.\n\n    Returns:\n    bool: True if tokens were assigned successfully, False otherwise.\n    """\n    voting = state["votings"].get(voting_id)\n    if not voting:\n        raise ValueError("Voting not found.")\n    if int(time.time()) > voting.fecha_limite:\n        raise ValueError("The voting period has ended.")\n\n    if voting.creator != public_key:\n        raise PermissionError("Only the voting creator can assign tokens.")\n\n    if voter not in voting.voters:\n        raise ValueError("Voter not found in the voting.")\n\n    voting.voters[voter]["tokens"] = amount\n    return True\n\ndef initialize_smart_contract():\n    """\n    Initialize the global state of the smart contract.\n\n    Returns:\n    None\n    """\n    # Global structure to store the state of the smart contract\n    if "votings" not in state:\n        state["votings"] = {}\n\n    if "tokens" not in state:\n        state["tokens"] = {}' args=[] kwargs={} operation_type=<OperationType.DEPLOY: 1> signature='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' created=datetime.datetime(2024, 2, 22, 4, 19, 20, 979019)
2024-02-21 23:19:53,848 [INFO] - Shutting down
2024-02-21 23:19:53,949 [INFO] - Waiting for application shutdown.
2024-02-21 23:19:53,950 [INFO] - Application shutdown complete.
2024-02-21 23:19:53,950 [INFO] - Finished server process [27999]
2024-02-21 23:19:54,586 [INFO] - Started server process [28395]
2024-02-21 23:19:54,587 [INFO] - Waiting for application startup.
2024-02-21 23:19:54,587 [INFO] - Application startup complete.
2024-02-21 23:20:08,457 [INFO] - Shutting down
2024-02-21 23:20:08,558 [INFO] - Waiting for application shutdown.
2024-02-21 23:20:08,559 [INFO] - Application shutdown complete.
2024-02-21 23:20:08,560 [INFO] - Finished server process [28395]
2024-02-21 23:20:09,176 [INFO] - Started server process [28543]
2024-02-21 23:20:09,176 [INFO] - Waiting for application startup.
2024-02-21 23:20:09,176 [INFO] - Application startup complete.
2024-02-21 23:20:40,419 [INFO] - Shutting down
2024-02-21 23:20:40,520 [INFO] - Waiting for application shutdown.
2024-02-21 23:20:40,521 [INFO] - Application shutdown complete.
2024-02-21 23:20:40,521 [INFO] - Finished server process [28543]
2024-02-21 23:20:41,168 [INFO] - Started server process [28822]
2024-02-21 23:20:41,168 [INFO] - Waiting for application startup.
2024-02-21 23:20:41,168 [INFO] - Application startup complete.
2024-02-21 23:20:45,218 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='85f3abe3ab7e81d609e3c488d757eeb69857dc80fd4971bc751d177865295808' payload={'function_signature': 'initialize_smart_contract', 'args': [], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 20, 45, 208632)
2024-02-21 23:21:01,388 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='85f3abe3ab7e81d609e3c488d757eeb69857dc80fd4971bc751d177865295808' payload={'function_signature': 'create_voting', 'args': ['9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==', 'binary', None, True, 1708575668, False], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 21, 1, 382065)
2024-02-21 23:21:17,163 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='85f3abe3ab7e81d609e3c488d757eeb69857dc80fd4971bc751d177865295808' payload={'function_signature': 'show_results', 'args': ['0540f053c0ecea1092e25f2b26ebdc8eb9af94c2b783a59769de6e2282ed1884'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 21, 17, 156744)
2024-02-21 23:21:29,421 [INFO] - Shutting down
2024-02-21 23:21:29,522 [INFO] - Waiting for application shutdown.
2024-02-21 23:21:29,523 [INFO] - Application shutdown complete.
2024-02-21 23:21:29,523 [INFO] - Finished server process [28822]
2024-02-21 23:21:32,402 [INFO] - Started server process [29370]
2024-02-21 23:21:32,403 [INFO] - Waiting for application startup.
2024-02-21 23:21:32,403 [INFO] - Application startup complete.
2024-02-21 23:21:40,655 [INFO] - Creating transaction: sender='9WfBh4y7NcH1kdzf2LUtwkZvlOkdsvGRfrcSTxUNS/TYPNzpJYPHw6q/ox5e03vL3EvJk0GEMpN97CDsHG7iY8v5QGIdHYtyso5Z7zvzQPGZa0IPjLHhHUzBD/ZN6dULe0BqyH7i4/Mf5hJwqH7H9NjyDUvHJh+RxN9f2HvFELPXiorbdsk5z4b+jjS30bw7GHvE9zndj0PdNF4Pc8hASSQh7tJYb6N/rM+FaIkVEwN5TAC5DqouvvfLwKAbWbWSy2i/SBmJ1GWyGfTDQ7R9bJ5dfF8wfgiybDgCOq1Tz+EupC4biY7gbxP7kIv3DW0A1dVSuj+3TtJruvJrXp1JcdMzX7D0jUpFvgnXe5QNw2TWoLg/C/3fuTO2OKNdZkxkyju/S/RuWXxigJChbgi1MPnEmFyQQprmdnC8BUeQ8mu3MbrGLYO5XUXRc/xk32SP5ujwk/HeGp2k9bQsxnojUm6Z0Fdtbaf/q8FDwliKJg2GbWnSL9NVluYGXGkzw1HOCwa0Z0flfGBOCsaZFBJy0I1kuG63SwXgyWW9MHq7hv2XZKRO2ovQTgOH+8Zwkvu/Gd384ImLxguBr2gwnaR3KXlACCzGyJdt14JhQNBzzoyY1BHlHoGUs9DMT6Pve5r2iZB0gaHOl4eDfbHCfDqcjJGOx9cYKkTi1D9XXgIs8VOLuZXRFL8PXVbJKX18YRcuFXskIUiFOcOV9SO8zoZN5a1RNfdoaBRgdBNgCAZSn/wyrAdOorSwHoWLHUG5ZPWrObH2z6cMGBe6Xyl2wrLttZ8Z0nam7gKhcQoSLCsuH+9SBwURJfCYEQBVCF17xILoxYfre96uMfeBzyDM23dFRto2rssi8xREqRYEbo5jfDz82El2q+6vhPE9ewpfjntF1FARwxeH0OtSedfW3AN5s5ytEu1iCeP/HrBy3r8E0idCy9vQkFSesFUv86x35X7hBX2tVhu+RNY1RTxxoKhVbkaLCbsBiWP147kZR91ZvFB7SHTJuBOqnUowo0Bl6Dfqmj2b1ZCOjTY4GSsXHtcy9l0eCjSt4Gk0woD7YHOhXvdpeLe7K6fGkrMex2Su9ayPoM4zwqGE0EGdgM0ya4OJ9tkw+w2ZdGcF4Lri9THMsUu4t8uFgPp0Myz64Sug3dkzs0o2wni1vDPCywRgQQdr3yfTqVOZix3eRcz6DS9JlointMXQtrNpFGBcLYEcU413SbL2TYPKgMv8OYn9kAhjI6r9hnES+UJfrsHq6jAxpQrdb1LWoz9dH6X/Hu2P874pf3d28quK+yIaK3NxmT2utWcSOG+m324hkLfOdsNu8xKEjSRDgUoF4OY8faHw56sTEFHxtbz0x2LCNgAYYXhsRBR9q73JvJNzp5isoRXIQs93IAM8UeRD7/BroCucntTSFiaZwFhBN8ZNglg/A+dgjl7MkdqT3IDpzCJbUB7/t6r4W22pBy4CVax9CpRlQ/ASNVApzsCVzI07DQ2C6oeBFNlQMjg+INm4CObDHZUeiXDnljz4gTUQybiOJK0t9aFPfSmzEm1tqN81RKqeaitjMff9x2OPMqLCvLPJG7G72nyO87FMxTrepxMsoe1k9uZQZa75snS43W5fTNGQTeX+pwTzD8lEtvahCvUXsLjmYzn8oRtTwAN+o8QCnPyOw7hVC5cGQythzV48SV8ezaaxCrVhL0Cp7RoVtxzrCpXZQ+8B7p/nZkbRwIQM92FW9BlvLr9m7+uteNgKhxTmrUY7yw==' contract_address='85f3abe3ab7e81d609e3c488d757eeb69857dc80fd4971bc751d177865295808' payload={'function_signature': 'show_results', 'args': ['0540f053c0ecea1092e25f2b26ebdc8eb9af94c2b783a59769de6e2282ed1884'], 'kwargs': {}} args=[] kwargs={} operation_type=<OperationType.CALL: 2> signature='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' created=datetime.datetime(2024, 2, 22, 4, 21, 40, 648683)
2024-02-21 23:22:05,569 [INFO] - Shutting down
2024-02-21 23:22:05,670 [INFO] - Waiting for application shutdown.
2024-02-21 23:22:05,671 [INFO] - Application shutdown complete.
2024-02-21 23:22:05,672 [INFO] - Finished server process [29370]
